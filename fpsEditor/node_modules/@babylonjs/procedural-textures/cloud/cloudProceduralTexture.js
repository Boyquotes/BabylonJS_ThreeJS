import { __decorate, __extends } from "tslib";
import { serialize, serializeAsColor4, SerializationHelper } from "@babylonjs/core/Misc/decorators.js";
import { Color4 } from "@babylonjs/core/Maths/math.color.js";
import { ProceduralTexture } from "@babylonjs/core/Materials/Textures/Procedurals/proceduralTexture.js";
import { RegisterClass } from "@babylonjs/core/Misc/typeStore.js";
import "./cloudProceduralTexture.fragment.js";
var CloudProceduralTexture = /** @class */ (function (_super) {
    __extends(CloudProceduralTexture, _super);
    function CloudProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
        if (scene === void 0) { scene = null; }
        var _this = _super.call(this, name, size, "cloudProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
        _this._skyColor = new Color4(0.15, 0.68, 1.0, 1.0);
        _this._cloudColor = new Color4(1, 1, 1, 1.0);
        _this._amplitude = 1;
        _this._numOctaves = 4;
        _this.updateShaderUniforms();
        return _this;
    }
    CloudProceduralTexture.prototype.updateShaderUniforms = function () {
        this.setColor4("skyColor", this._skyColor);
        this.setColor4("cloudColor", this._cloudColor);
        this.setFloat("amplitude", this._amplitude);
        this.setInt("numOctaves", this._numOctaves);
    };
    Object.defineProperty(CloudProceduralTexture.prototype, "skyColor", {
        get: function () {
            return this._skyColor;
        },
        set: function (value) {
            this._skyColor = value;
            this.updateShaderUniforms();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloudProceduralTexture.prototype, "cloudColor", {
        get: function () {
            return this._cloudColor;
        },
        set: function (value) {
            this._cloudColor = value;
            this.updateShaderUniforms();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloudProceduralTexture.prototype, "amplitude", {
        get: function () {
            return this._amplitude;
        },
        set: function (value) {
            this._amplitude = value;
            this.updateShaderUniforms();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CloudProceduralTexture.prototype, "numOctaves", {
        get: function () {
            return this._numOctaves;
        },
        set: function (value) {
            this._numOctaves = value;
            this.updateShaderUniforms();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Serializes this cloud procedural texture
     * @returns a serialized cloud procedural texture object
     */
    CloudProceduralTexture.prototype.serialize = function () {
        var serializationObject = SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
        serializationObject.customType = "BABYLON.CloudProceduralTexture";
        return serializationObject;
    };
    /**
     * Creates a Cloud Procedural Texture from parsed cloud procedural texture data
     * @param parsedTexture defines parsed texture data
     * @param scene defines the current scene
     * @param rootUrl defines the root URL containing cloud procedural texture information
     * @returns a parsed Cloud Procedural Texture
     */
    CloudProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
        var texture = SerializationHelper.Parse(function () { return new CloudProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps); }, parsedTexture, scene, rootUrl);
        return texture;
    };
    __decorate([
        serializeAsColor4()
    ], CloudProceduralTexture.prototype, "skyColor", null);
    __decorate([
        serializeAsColor4()
    ], CloudProceduralTexture.prototype, "cloudColor", null);
    __decorate([
        serialize()
    ], CloudProceduralTexture.prototype, "amplitude", null);
    __decorate([
        serialize()
    ], CloudProceduralTexture.prototype, "numOctaves", null);
    return CloudProceduralTexture;
}(ProceduralTexture));
export { CloudProceduralTexture };
RegisterClass("BABYLON.CloudProceduralTexture", CloudProceduralTexture);
//# sourceMappingURL=cloudProceduralTexture.js.map