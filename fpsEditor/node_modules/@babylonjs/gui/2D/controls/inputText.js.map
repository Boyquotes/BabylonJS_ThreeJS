{"version":3,"file":"inputText.js","sourceRoot":"","sources":["../../../../../../lts/gui/generated/2D/controls/inputText.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,UAAU,EAAE,2CAA6B;AAGlD,OAAO,EAAE,mBAAmB,EAAE,kDAAoC;AAElE,OAAO,EAAE,iBAAiB,EAAE,gDAAkC;AAE9D,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,OAAO,EAAE,aAAa,EAAE,0CAA4B;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,2CAA6B;AAIjD;;GAEG;AACH;IAA+B,6BAAO;IA+UlC;;;;OAIG;IACH,mBAAmB,IAAa,EAAE,IAAiB;QAAjB,qBAAA,EAAA,SAAiB;QAAnD,YACI,kBAAM,IAAI,CAAC,SAId;QALkB,UAAI,GAAJ,IAAI,CAAS;QAlVxB,sBAAgB,GAAG,EAAE,CAAC;QACtB,iBAAW,GAAG,SAAS,CAAC;QACxB,wBAAkB,GAAG,SAAS,CAAC;QAC/B,mBAAa,GAAG,OAAO,CAAC;QACxB,uBAAiB,GAAG,MAAM,CAAC;QAC3B,gBAAU,GAAG,CAAC,CAAC;QACf,aAAO,GAAG,IAAI,YAAY,CAAC,EAAE,EAAE,YAAY,CAAC,cAAc,CAAC,CAAC;QAC5D,uBAAiB,GAAG,IAAI,CAAC;QACzB,eAAS,GAAG,IAAI,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QACzE,gBAAU,GAAG,KAAK,CAAC;QAInB,kBAAY,GAAG,KAAK,CAAC;QACrB,mBAAa,GAAG,CAAC,CAAC;QAIlB,cAAQ,GAAG,KAAK,CAAC;QACjB,aAAO,GAAG,IAAI,CAAC;QACf,iBAAW,GAAG,EAAE,CAAC;QACjB,wBAAkB,GAAG,KAAK,CAAC;QAC3B,yBAAmB,GAAG,SAAS,CAAC;QAChC,wBAAkB,GAAG,GAAG,CAAC;QACzB,sBAAgB,GAAG,EAAE,CAAC;QACtB,0BAAoB,GAAG,CAAC,CAAC;QACzB,wBAAkB,GAAG,CAAC,CAAC;QACvB,kBAAY,GAAG,CAAC,CAAC,CAAC;QAClB,uBAAiB,GAAG,KAAK,CAAC;QAC1B,oBAAc,GAAG,KAAK,CAAC;QAO/B,yGAAyG;QAElG,mBAAa,GAAG,oBAAoB,CAAC;QAC5C,4CAA4C;QAErC,yBAAmB,GAAG,KAAK,CAAC;QAEnC,8CAA8C;QACvC,6BAAuB,GAAG,IAAI,UAAU,EAAa,CAAC;QAC7D,wEAAwE;QACjE,8BAAwB,GAAG,IAAI,UAAU,EAAa,CAAC;QAC9D,wDAAwD;QACjD,uBAAiB,GAAG,IAAI,UAAU,EAAa,CAAC;QACvD,yDAAyD;QAClD,sBAAgB,GAAG,IAAI,UAAU,EAAa,CAAC;QACtD,oDAAoD;QAC7C,+BAAyB,GAAG,IAAI,UAAU,EAAa,CAAC;QAC/D,oDAAoD;QAC7C,0BAAoB,GAAG,IAAI,UAAU,EAAa,CAAC;QAC1D,oDAAoD;QAC7C,yBAAmB,GAAG,IAAI,UAAU,EAAa,CAAC;QACzD,sDAAsD;QAC/C,2BAAqB,GAAG,IAAI,UAAU,EAAa,CAAC;QAC3D,uDAAuD;QAChD,wCAAkC,GAAG,IAAI,UAAU,EAAkB,CAAC;QAyRzE,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;;IACjC,CAAC;IAvRD,sBAAW,+BAAQ;QAFnB,4DAA4D;aAE5D;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC;aAOD,UAAoB,KAAsB;YACtC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;gBAC/C,OAAO;aACV;YAED,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAClC,IAAI,CAAC,YAAY,EAAE,CAAC;aACvB;QACL,CAAC;;;OAfA;IAGD,sBAAW,uCAAgB;QAD3B,8DAA8D;aAC9D;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACvF,CAAC;;;OAAA;IAcD,sBAAW,wCAAiB;QAF5B,mEAAmE;aAEnE;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACnC,CAAC;aAED,UAA6B,KAAa;YACtC,IAAI,IAAI,CAAC,kBAAkB,KAAK,KAAK,EAAE;gBACnC,OAAO;aACV;YACD,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OARA;IAWD,sBAAW,uCAAgB;QAF3B,kGAAkG;aAElG;YACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,CAAC;aAED,UAA4B,KAAc;YACtC,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK,EAAE;gBAClC,OAAO;aACV;YAED,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,yCAAkB;QAF7B,6CAA6C;aAE7C;YACI,OAAO,IAAI,CAAC,mBAAmB,CAAC;QACpC,CAAC;aAED,UAA8B,KAAa;YACvC,IAAI,IAAI,CAAC,mBAAmB,KAAK,KAAK,EAAE;gBACpC,OAAO;aACV;YACD,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OARA;IAYD,sBAAW,6BAAM;QAFjB,kCAAkC;aAElC;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;aAOD,UAAkB,KAAa;YAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;gBAC7C,OAAO;aACV;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAChC,IAAI,CAAC,YAAY,EAAE,CAAC;aACvB;QACL,CAAC;;;OAfA;IAGD,sBAAW,qCAAc;QADzB,oCAAoC;aACpC;YACI,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACrF,CAAC;;;OAAA;IAcD,sBAAW,uCAAgB;QAF3B,uGAAuG;aAEvG;YACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,CAAC;aAED,UAA4B,KAAc;YACtC,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK,EAAE;gBAClC,OAAO;aACV;YAED,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,gCAAS;QAFpB,oCAAoC;aAEpC;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;aAED,UAAqB,KAAa;YAC9B,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE;gBAC3B,OAAO;aACV;YAED,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,wCAAiB;QAF5B,qDAAqD;aAErD;YACI,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACnC,CAAC;aAED,UAA6B,KAAa;YACtC,IAAI,IAAI,CAAC,kBAAkB,KAAK,KAAK,EAAE;gBACnC,OAAO;aACV;YAED,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,mCAAY;QAFvB,qDAAqD;aAErD;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;aAED,UAAwB,KAAa;YACjC,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,EAAE;gBAC9B,OAAO;aACV;YAED,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,iCAAU;QAFrB,wCAAwC;aAExC;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aAED,UAAsB,KAAa;YAC/B,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,EAAE;gBAC5B,OAAO;aACV;YAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,uCAAgB;QAF3B,yCAAyC;aAEzC;YACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,CAAC;aAED,UAA4B,KAAa;YACrC,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK,EAAE;gBAClC,OAAO;aACV;YAED,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OATA;IAaD,sBAAW,sCAAe;QAF1B,gEAAgE;aAEhE;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;aAED,UAA2B,KAAa;YACpC,IAAI,IAAI,CAAC,gBAAgB,KAAK,KAAK,EAAE;gBACjC,OAAO;aACV;YACD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OARA;IAYD,sBAAW,8BAAO;QAFlB,qCAAqC;aAErC;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aAED,UAAmB,IAAa;YAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACzB,CAAC;;;OAJA;IAOD,sBAAW,sCAAe;QAD1B,sCAAsC;aACtC;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;aACD,UAA2B,IAAY;YACnC,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,EAAE;gBAChC,OAAO;aACV;YACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;;;OAPA;IAUD,sBAAW,6BAAM;QADjB,sDAAsD;aACtD;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;aAED,UAAkB,IAAa;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACxB,CAAC;;;OAJA;IAOD,sBAAW,iCAAU;QADrB,8DAA8D;aAC9D;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;aAED,UAAsB,GAAW;YAC7B,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;QAC3B,CAAC;;;OAJA;IAQD,sBAAW,2BAAI;QAFf,qDAAqD;aAErD;YACI,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;QAClC,CAAC;aAED,UAAgB,KAAa;YACzB,IAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,qBAAqB;YAE7D,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACpB,IAAI,CAAC,YAAY,GAAG,IAAI,WAAW,EAAE,CAAC;aACzC;YAED,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,aAAa,EAAE;gBAC1C,OAAO;aACV;YACD,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,aAAa,CAAC;YACvC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC3B,CAAC;;;OAdA;IAgBO,mCAAe,GAAvB;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAID,sBAAW,4BAAK;QAFhB,iCAAiC;aAEjC;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;aAED,UAAiB,KAAsB;YACnC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE;gBAC5C,OAAO;aACV;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;aACvB;YAED,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAClC,CAAC;;;OAZA;IA0BD,cAAc;IACP,0BAAM,GAAb;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE5C,IAAI,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC3B,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SACtE;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,IAAI,CAAC,wBAAwB,IAAI,KAAK,EAAE;YACxC,KAAK,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;SACnE;IACL,CAAC;IAED,cAAc;IACP,2BAAO,GAAd;QAAA,iBA4DC;QA3DG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO;SACV;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE7C,IAAI,IAAI,CAAC,UAAU,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC1D,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAEzC,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;aACrB;YACD,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;YACjC,OAAO;SACV;QAED,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC;QAErC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAC,aAAa;YAC3E,8CAA8C;YAC9C,QAAQ,aAAa,CAAC,IAAI,EAAE;gBACxB,KAAK,mBAAmB,CAAC,IAAI;oBACzB,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACtC,KAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,KAAI,CAAC,CAAC;oBAChD,MAAM;gBACV,KAAK,mBAAmB,CAAC,GAAG;oBACxB,KAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACrC,KAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,KAAI,CAAC,CAAC;oBAC/C,MAAM;gBACV,KAAK,mBAAmB,CAAC,KAAK;oBAC1B,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACvC,KAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,KAAI,CAAC,CAAC;oBACjD,MAAM;gBACV;oBACI,OAAO;aACd;QACL,CAAC,CAAC,CAAC;QAEH,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,KAAK,EAAE;YACP,uCAAuC;YACvC,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC,mBAAmB,CAAC,GAAG,CAAC,UAAC,WAAW;gBACtE,IAAI,CAAC,KAAI,CAAC,UAAU,EAAE;oBAClB,OAAO;iBACV;gBACD,IAAI,WAAW,CAAC,IAAI,KAAK,iBAAiB,CAAC,gBAAgB,EAAE;oBACzD,KAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;iBACtC;YACL,CAAC,CAAC,CAAC;SACN;QAED,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;IACL,CAAC;IAED;;OAEG;IACI,yBAAK,GAAZ;QACI,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,wBAAI,GAAX;QACI,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;IACrC,CAAC;IAES,gCAAY,GAAtB;QACI,OAAO,WAAW,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,kCAAc,GAArB;QACI,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;YACjC,OAAO,IAAI,CAAC;SACf;QACD,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,8BAAU,GAAjB,UAAkB,OAAe,EAAE,GAAY,EAAE,GAAoB;QACjE,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO;SACV;QAED,uDAAuD;QACvD,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,KAAK,EAAE,IAAI,OAAO,KAAK,EAAE,IAAI,OAAO,KAAK,EAAE,CAAC,EAAE;YAC7F,OAAO;SACV;QAED,YAAY;QACZ,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,OAAO,KAAK,EAAE,EAAE;YACvD,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,GAAG,CAAC,cAAc,EAAE,CAAC;YACrB,OAAO;SACV;QACD,iBAAiB;QACjB,QAAQ,OAAO,EAAE;YACb,KAAK,EAAE,EAAE,OAAO;gBACZ,GAAG,GAAG,GAAG,CAAC,CAAC,kCAAkC;gBAC7C,MAAM;YACV,KAAK,GAAG,EAAE,OAAO;gBACb,IAAI,GAAG,EAAE;oBACL,GAAG,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,MAAM;YACV,KAAK,CAAC,EAAE,YAAY;gBAChB,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxD,6BAA6B;oBAC7B,IAAI,IAAI,CAAC,kBAAkB,EAAE;wBACzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;wBACjF,IAAI,CAAC,eAAe,EAAE,CAAC;wBACvB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;wBAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;wBAC1E,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;wBAC1B,IAAI,GAAG,EAAE;4BACL,GAAG,CAAC,cAAc,EAAE,CAAC;yBACxB;wBACD,OAAO;qBACV;oBACD,yBAAyB;oBACzB,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;wBAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;qBACzE;yBAAM;wBACH,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;wBACrE,IAAI,cAAc,GAAG,CAAC,EAAE;4BACpB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;4BACjE,IAAI,CAAC,eAAe,EAAE,CAAC;yBAC1B;qBACJ;iBACJ;gBACD,IAAI,GAAG,EAAE;oBACL,GAAG,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,OAAO;YACX,KAAK,EAAE,EAAE,SAAS;gBACd,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBACjF,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;oBAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBAC1E,IAAI,GAAG,EAAE;wBACL,GAAG,CAAC,cAAc,EAAE,CAAC;qBACxB;oBACD,OAAO;iBACV;gBACD,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;oBAClF,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;oBACrE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,cAAc,EAAE,cAAc,GAAG,CAAC,CAAC,CAAC;oBACjE,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,aAAa,EAAE,CAAC;iBACxB;gBACD,IAAI,GAAG,EAAE;oBACL,GAAG,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,OAAO;YACX,KAAK,EAAE,EAAE,SAAS;gBACd,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;gBACjC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,OAAO;YACX,KAAK,EAAE,EAAE,MAAM;gBACX,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAO;YACX,KAAK,EAAE,EAAE,OAAO;gBACZ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC9C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAO;YACX,KAAK,EAAE,EAAE,OAAO;gBACZ,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;oBAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;iBACjD;gBAED,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE;oBACrB,oBAAoB;oBACpB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;oBAC1B,wBAAwB;oBACxB,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,EAAE;wBAC5B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;4BAC1B,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,aAAa,EAAE;gCACjD,OAAO;6BACV;iCAAM;gCACH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;6BAC/E;yBACJ;wBACD,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;wBAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC;wBACvE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;wBAC9C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;wBACpB,OAAO;qBACV;oBACD,0BAA0B;oBAC1B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;wBAC1B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;qBAC1H;oBACD,gCAAgC;yBAC3B,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,EAAE;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC;wBACvE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,oBAAoB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;qBAC9I;oBACD,2BAA2B;oBAC3B,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE;wBACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;wBACvE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;qBAC7E;yBAAM,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE;wBAC/C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;wBACxE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;qBAC5E;yBAAM;wBACH,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACnC;oBACD,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,OAAO;iBACV;gBACD,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;oBAC1E,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACnC;gBACD,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,EAAE;oBACrC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;oBAC9C,GAAG,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAO;YACX,KAAK,EAAE,EAAE,QAAQ;gBACb,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;oBACxB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;iBAC1B;gBACD,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE;oBACrB,mBAAmB;oBACnB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;oBAC1B,uBAAuB;oBACvB,IAAI,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,EAAE;wBAC5B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;4BAC1B,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;gCAC1B,OAAO;6BACV;iCAAM;gCACH,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;6BACjF;yBACJ;wBACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;wBACnD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;wBACzE,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;wBACvB,IAAI,CAAC,YAAY,EAAE,CAAC;wBACpB,OAAO;qBACV;oBAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;wBAC1B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;qBAC5E;oBACD,gCAAgC;yBAC3B,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,EAAE;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;wBACzE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;qBAC1I;oBACD,2BAA2B;oBAC3B,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE;wBACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;wBACvE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;qBAC7E;yBAAM,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE;wBAC/C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;wBACxE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;qBAC5E;yBAAM;wBACH,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACnC;oBACD,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,OAAO;iBACV;gBACD,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC;oBACxE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACnC;gBACD,UAAU;gBACV,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,EAAE;oBACrC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;oBACvB,GAAG,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAO;YACX,KAAK,GAAG,EAAE,OAAO;gBACb,IAAI,GAAG,EAAE;oBACL,0CAA0C;oBAC1C,IAAI,GAAG,CAAC,IAAI,IAAI,OAAO,EAAE;wBACrB,IAAI,GAAG,CAAC,QAAQ,EAAE;4BACd,OAAO,GAAG,EAAE,CAAC;4BACb,GAAG,GAAG,GAAG,CAAC;yBACb;6BAAM;4BACH,OAAO,GAAG,EAAE,CAAC;4BACb,GAAG,GAAG,GAAG,CAAC;yBACb;qBACJ;yBAAM;wBACH,GAAG,CAAC,cAAc,EAAE,CAAC;wBACrB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;wBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;qBACvB;iBACJ;qBAAM;oBACH,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;iBACvB;gBACD,MAAM;SACb;QACD,uBAAuB;QACvB,IACI,GAAG;YACH,CAAC,OAAO,KAAK,CAAC,CAAC,IAAI,gBAAgB;gBAC/B,OAAO,KAAK,EAAE,IAAI,QAAQ;gBAC1B,OAAO,KAAK,EAAE,IAAI,gDAAgD;gBAClE,OAAO,KAAK,EAAE,IAAI,IAAI;gBACtB,CAAC,OAAO,GAAG,EAAE,IAAI,OAAO,GAAG,EAAE,CAAC,IAAI,UAAU;gBAC5C,CAAC,OAAO,GAAG,EAAE,IAAI,OAAO,GAAG,EAAE,CAAC,IAAI,UAAU;gBAC5C,CAAC,OAAO,GAAG,GAAG,IAAI,OAAO,GAAG,GAAG,CAAC,IAAI,qBAAqB;gBACzD,CAAC,OAAO,GAAG,GAAG,IAAI,OAAO,GAAG,GAAG,CAAC,IAAI,qBAAqB;gBACzD,CAAC,OAAO,GAAG,EAAE,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC,EACtC;YACE,SAAS;YACT,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YACvB,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACpD,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;YACvB,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;oBACtF,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC;oBAChF,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;oBAChC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;oBAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;iBACvB;qBAAM,IAAI,IAAI,CAAC,aAAa,KAAK,CAAC,EAAE;oBACjC,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;iBACpB;qBAAM;oBACH,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;oBACrE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,cAAc,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;oBAClE,IAAI,CAAC,eAAe,EAAE,CAAC;iBAC1B;aACJ;SACJ;IACL,CAAC;IAED;;;OAGG;IACK,+CAA2B,GAAnC,UAAoC,MAAc;QAC9C,mBAAmB;QACnB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,EAAE;YAC1B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;SAC9B;aAAM;YACH,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE;gBACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;gBACvE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;aAC7E;iBAAM,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,EAAE;gBAC/C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;aAC5E;iBAAM;gBACH,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAO;aACV;SACJ;QACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IACD;;;OAGG;IACH,6DAA6D;IACrD,oCAAgB,GAAxB,UAAyB,GAAgB;QACrC,oFAAoF;QACpF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;QAC1E,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACpD,IAAI,QAAQ,EAAE,SAAS,CAAC;QACxB,GAAG;YACC,SAAS,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;YACpJ,QAAQ,GAAG,IAAI,CAAC,oBAAoB,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;SACzI,QAAQ,QAAQ,IAAI,SAAS,EAAE;QAEhC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAC1E,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAErD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IACD,cAAc;IACN,kCAAc,GAAtB;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAE/B,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QACnD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED;;;OAGG;IACI,mCAAe,GAAtB,UAAuB,GAAmB;QACtC,sBAAsB;QACtB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAE3C,IAAI,CAAC,kCAAkC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACK,+BAAW,GAAnB,UAAoB,EAAkB;QAClC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,mDAAmD;QACnD,IAAI;YACA,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACrF;QAAC,WAAM,GAAE,CAAC,MAAM;QACjB,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACrD,CAAC;IACD;;;OAGG;IACK,8BAAU,GAAlB,UAAmB,EAAkB;QACjC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACxB,OAAO;SACV;QACD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACjF,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAC1E,mDAAmD;QACnD,IAAI;YACA,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACrF;QAAC,WAAM,GAAE,CAAC,MAAM;QAEjB,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACjD,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC/B,CAAC;IACD;;;OAGG;IACK,gCAAY,GAApB,UAAqB,EAAkB;QACnC,IAAI,IAAI,GAAW,EAAE,CAAC;QACtB,IAAI,EAAE,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;YACzE,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SACjD;aAAM;YACH,sDAAsD;YACtD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;SACnC;QACD,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;QACrE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,cAAc,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEM,yBAAK,GAAZ,UAAa,OAAgC;QAA7C,iBAiLC;QAhLG,OAAO,CAAC,IAAI,EAAE,CAAC;QAEf,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAAE;YAC7D,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACvC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACrC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;YAC3C,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;SAC9C;QAED,aAAa;QACb,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;gBAEpF,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;aAClI;SACJ;aAAM,IAAI,IAAI,CAAC,WAAW,EAAE;YACzB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;YAE7E,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;SAClI;QAED,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAAE;YAC7D,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC;YACvB,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC;YAC1B,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,EAAE;YACrC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC3D;QAED,OAAO;QACP,IAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACzH,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;SAClC;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAErD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACtE,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAElC,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBACxB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;aAC9C;SACJ;QAED,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;QACvD,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChG,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC;YACvI,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gEAAgE;SAClG;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACpG,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;QAE5G,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,SAAS,EAAE,CAAC;QACpB,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,cAAc,GAAG,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACpK,OAAO,CAAC,IAAI,EAAE,CAAC;QAEf,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,GAAG,cAAc,EAAE;YACrD,IAAM,QAAQ,GAAG,YAAY,GAAG,IAAI,CAAC,UAAU,GAAG,cAAc,CAAC;YACjE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACnB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;aAC/B;SACJ;aAAM;YACH,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;SACnC;QAED,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QAEhF,SAAS;QACT,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,sBAAsB;YACtB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAM,aAAa,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC;gBACzD,IAAM,sBAAsB,GAAG,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC;gBACvE,IAAI,WAAW,GAAG,CAAC,CAAC;gBACpB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;gBACvB,IAAI,YAAY,GAAG,CAAC,CAAC;gBACrB,GAAG;oBACC,IAAI,IAAI,CAAC,aAAa,EAAE;wBACpB,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,sBAAsB,GAAG,WAAW,CAAC,CAAC;qBACjE;oBACD,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;iBAC9G,QAAQ,WAAW,GAAG,sBAAsB,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,EAAE;gBAEpF,oBAAoB;gBACpB,IAAI,IAAI,CAAC,GAAG,CAAC,sBAAsB,GAAG,WAAW,CAAC,GAAG,YAAY,EAAE;oBAC/D,IAAI,CAAC,aAAa,EAAE,CAAC;iBACxB;gBAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAClC;YAED,gBAAgB;YAChB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACpB,IAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;gBACvE,IAAM,iBAAiB,GAAG,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC;gBACtE,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC;gBAExE,IAAI,UAAU,GAAG,YAAY,EAAE;oBAC3B,IAAI,CAAC,WAAW,IAAI,YAAY,GAAG,UAAU,CAAC;oBAC9C,UAAU,GAAG,YAAY,CAAC;oBAC1B,IAAI,CAAC,YAAY,EAAE,CAAC;iBACvB;qBAAM,IAAI,UAAU,GAAG,YAAY,GAAG,cAAc,EAAE;oBACnD,IAAI,CAAC,WAAW,IAAI,YAAY,GAAG,cAAc,GAAG,UAAU,CAAC;oBAC/D,UAAU,GAAG,YAAY,GAAG,cAAc,CAAC;oBAC3C,IAAI,CAAC,YAAY,EAAE,CAAC;iBACvB;gBACD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;oBAC1B,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBACpJ;aACJ;YAED,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,GAAQ,UAAU,CAAC;gBACjC,KAAI,CAAC,YAAY,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC;gBACvC,KAAI,CAAC,YAAY,EAAE,CAAC;YACxB,CAAC,EAAE,GAAG,CAAC,CAAC;YAER,2BAA2B;YAC3B,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACjC,IAAM,0BAA0B,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC;gBACxG,IAAI,mBAAmB,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,0BAA0B,CAAC;gBAC1F,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBAC3F,IAAI,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC1G,IAAI,mBAAmB,GAAG,YAAY,EAAE;oBACpC,KAAK,GAAG,KAAK,GAAG,CAAC,YAAY,GAAG,mBAAmB,CAAC,CAAC;oBACrD,IAAI,CAAC,KAAK,EAAE;wBACR,yDAAyD;wBACzD,2DAA2D;wBAC3D,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC;qBACpF;oBACD,mBAAmB,GAAG,YAAY,CAAC;iBACtC;gBACD,kBAAkB;gBAClB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC;gBAC9C,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC;gBAC7C,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC9J,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC;aAC7B;SACJ;QACD,OAAO,CAAC,OAAO,EAAE,CAAC;QAElB,SAAS;QACT,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,IAAI,IAAI,CAAC,YAAY,EAAE;oBACnB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;iBAC3C;aACJ;iBAAM;gBACH,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;iBACpC;aACJ;YAED,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YAEpC,OAAO,CAAC,UAAU,CACd,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,EAC/C,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,EAC9C,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,EAC5C,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAChD,CAAC;SACL;QAED,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAEM,kCAAc,GAArB,UAAsB,MAAe,EAAE,WAAoB,EAAE,SAAiB,EAAE,WAAmB,EAAE,EAAmB;QACpH,IAAI,CAAC,iBAAM,cAAc,YAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,EAAE,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAI,EAAE,CAAC,KAAuB,CAAC,WAAW,CAAC;QAC1D,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,IAAI,EAAE;YACpC,cAAc;YACd,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC;SACf;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;QAEjC,OAAO,IAAI,CAAC;IAChB,CAAC;IACM,kCAAc,GAArB,UAAsB,MAAe,EAAE,WAAoB,EAAE,SAAiB,EAAE,EAAmB;QAC/F,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC/E,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACxD;QACD,iBAAM,cAAc,YAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IAC7D,CAAC;IAEM,gCAAY,GAAnB,UAAoB,MAAe,EAAE,WAAoB,EAAE,SAAiB,EAAE,WAAmB,EAAE,WAAoB;QACnH,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC/C,iBAAM,YAAY,YAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACjF,CAAC;IAES,qCAAiB,GAA3B,UAA4B,WAAwB;QAChD,OAAO,WAAW,CAAC;IACvB,CAAC;IAEM,2BAAO,GAAd;QACI,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;QAClC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;QACvC,IAAI,CAAC,kCAAkC,CAAC,KAAK,EAAE,CAAC;IACpD,CAAC;IAjiCD;QADC,SAAS,EAAE;oDACgC;IAG5C;QADC,SAAS,EAAE;0DACuB;IAuBnC;QADC,SAAS,EAAE;6CAGX;IAmBD;QADC,SAAS,EAAE;sDAGX;IAWD;QADC,SAAS,EAAE;qDAGX;IAaD;QADC,SAAS,EAAE;uDAGX;IAYD;QADC,SAAS,EAAE;2CAGX;IAmBD;QADC,SAAS,EAAE;qDAGX;IAaD;QADC,SAAS,EAAE;8CAGX;IAaD;QADC,SAAS,EAAE;sDAGX;IAaD;QADC,SAAS,EAAE;iDAGX;IAaD;QADC,SAAS,EAAE;+CAGX;IAaD;QADC,SAAS,EAAE;qDAGX;IAaD;QADC,SAAS,EAAE;oDAGX;IAYD;QADC,SAAS,EAAE;4CAGX;IAsCD;QADC,SAAS,EAAE;yCAGX;IAuBD;QADC,SAAS,EAAE;0CAGX;IAywBL,gBAAC;CAAA,AA1kCD,CAA+B,OAAO,GA0kCrC;SA1kCY,SAAS;AA2kCtB,aAAa,CAAC,uBAAuB,EAAE,SAAS,CAAC,CAAC","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport type { Vector2 } from \"core/Maths/math.vector\";\r\nimport type { ClipboardInfo } from \"core/Events/clipboardEvents\";\r\nimport { ClipboardEventTypes } from \"core/Events/clipboardEvents\";\r\nimport type { PointerInfo, PointerInfoBase } from \"core/Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"core/Events/pointerEvents\";\r\n\r\nimport { Control } from \"./control\";\r\nimport type { IFocusableControl } from \"./focusableControl\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport type { VirtualKeyboard } from \"./virtualKeyboard\";\r\nimport { RegisterClass } from \"core/Misc/typeStore\";\r\nimport { TextWrapper } from \"./textWrapper\";\r\nimport { serialize } from \"core/Misc/decorators\";\r\nimport type { IKeyboardEvent, IPointerEvent } from \"core/Events/deviceInputEvents\";\r\nimport type { ICanvasRenderingContext } from \"core/Engines/ICanvas\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _textWrapper: TextWrapper;\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _focusedColor = \"white\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    /** the type of device that most recently focused the input: \"mouse\", \"touch\" or \"pen\" */\r\n    private _focusedBy: string;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n    private _isTextHighlightOn = false;\r\n    private _textHighlightColor = \"#d5e0ff\";\r\n    private _highligherOpacity = 0.4;\r\n    private _highlightedText = \"\";\r\n    private _startHighlightIndex = 0;\r\n    private _endHighlightIndex = 0;\r\n    private _cursorIndex = -1;\r\n    private _onFocusSelectAll = false;\r\n    private _isPointerDown = false;\r\n    private _onClipboardObserver: Nullable<Observer<ClipboardInfo>>;\r\n    private _onPointerDblTapObserver: Nullable<Observer<PointerInfo>>;\r\n\r\n    /** @hidden */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    @serialize()\r\n    public promptMessage = \"Please enter text:\";\r\n    /** Force disable prompt on mobile device */\r\n    @serialize()\r\n    public disableMobilePrompt = false;\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n    /**Observable raised when the text is highlighted */\r\n    public onTextHighlightObservable = new Observable<InputText>();\r\n    /**Observable raised when copy event is triggered */\r\n    public onTextCopyObservable = new Observable<InputText>();\r\n    /** Observable raised when cut event is triggered */\r\n    public onTextCutObservable = new Observable<InputText>();\r\n    /** Observable raised when paste event is triggered */\r\n    public onTextPasteObservable = new Observable<InputText>();\r\n    /** Observable raised when a key event was processed */\r\n    public onKeyboardEventProcessedObservable = new Observable<IKeyboardEvent>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    @serialize()\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the text highlighter transparency; default: 0.4 */\r\n    @serialize()\r\n    public get highligherOpacity(): number {\r\n        return this._highligherOpacity;\r\n    }\r\n\r\n    public set highligherOpacity(value: number) {\r\n        if (this._highligherOpacity === value) {\r\n            return;\r\n        }\r\n        this._highligherOpacity = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets a boolean indicating whether to select complete text by default on input focus */\r\n    @serialize()\r\n    public get onFocusSelectAll(): boolean {\r\n        return this._onFocusSelectAll;\r\n    }\r\n\r\n    public set onFocusSelectAll(value: boolean) {\r\n        if (this._onFocusSelectAll === value) {\r\n            return;\r\n        }\r\n\r\n        this._onFocusSelectAll = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text hightlight color */\r\n    @serialize()\r\n    public get textHighlightColor(): string {\r\n        return this._textHighlightColor;\r\n    }\r\n\r\n    public set textHighlightColor(value: string) {\r\n        if (this._textHighlightColor === value) {\r\n            return;\r\n        }\r\n        this._textHighlightColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    @serialize()\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    @serialize()\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    @serialize()\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    @serialize()\r\n    public get focusedColor(): string {\r\n        return this._focusedColor;\r\n    }\r\n\r\n    public set focusedColor(value: string) {\r\n        if (this._focusedColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    @serialize()\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    @serialize()\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    @serialize()\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    @serialize()\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the highlight text */\r\n    public get highlightedText(): string {\r\n        return this._highlightedText;\r\n    }\r\n    public set highlightedText(text: string) {\r\n        if (this._highlightedText === text) {\r\n            return;\r\n        }\r\n        this._highlightedText = text;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    @serialize()\r\n    public get text(): string {\r\n        return this._textWrapper.text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        const valueAsString = value.toString(); // Forcing convertion\r\n\r\n        if (!this._textWrapper) {\r\n            this._textWrapper = new TextWrapper();\r\n        }\r\n\r\n        if (this._textWrapper.text === valueAsString) {\r\n            return;\r\n        }\r\n        this._textWrapper.text = valueAsString;\r\n        this._textHasChanged();\r\n    }\r\n\r\n    private _textHasChanged(): void {\r\n        this._markAsDirty();\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    @serialize()\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n\r\n        this._host.unRegisterClipboardEvents();\r\n        if (this._onClipboardObserver) {\r\n            this._host.onClipboardObservable.remove(this._onClipboardObserver);\r\n        }\r\n        const scene = this._host.getScene();\r\n        if (this._onPointerDblTapObserver && scene) {\r\n            scene.onPointerObservable.remove(this._onPointerDblTapObserver);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (this._focusedBy === \"touch\" && !this.disableMobilePrompt) {\r\n            const value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n\r\n        this._host.registerClipboardEvents();\r\n\r\n        this._onClipboardObserver = this._host.onClipboardObservable.add((clipboardInfo) => {\r\n            // process clipboard event, can be configured.\r\n            switch (clipboardInfo.type) {\r\n                case ClipboardEventTypes.COPY:\r\n                    this._onCopyText(clipboardInfo.event);\r\n                    this.onTextCopyObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.CUT:\r\n                    this._onCutText(clipboardInfo.event);\r\n                    this.onTextCutObservable.notifyObservers(this);\r\n                    break;\r\n                case ClipboardEventTypes.PASTE:\r\n                    this._onPasteText(clipboardInfo.event);\r\n                    this.onTextPasteObservable.notifyObservers(this);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        });\r\n\r\n        const scene = this._host.getScene();\r\n        if (scene) {\r\n            //register the pointer double tap event\r\n            this._onPointerDblTapObserver = scene.onPointerObservable.add((pointerInfo) => {\r\n                if (!this._isFocused) {\r\n                    return;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                    this._processDblClick(pointerInfo);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (this._onFocusSelectAll) {\r\n            this._selectAllText();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to focus an inputText programmatically\r\n     */\r\n    public focus() {\r\n        this._host.moveFocusToControl(this);\r\n    }\r\n\r\n    /**\r\n     * Function to unfocus an inputText programmatically\r\n     */\r\n    public blur() {\r\n        this._host.focusedControl = null;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /**\r\n     * @param keyCode\r\n     * @param key\r\n     * @param evt\r\n     * @hidden\r\n     */\r\n    public processKey(keyCode: number, key?: string, evt?: IKeyboardEvent) {\r\n        if (this.isReadOnly) {\r\n            return;\r\n        }\r\n\r\n        //return if clipboard event keys (i.e -ctr/cmd + c,v,x)\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && (keyCode === 67 || keyCode === 86 || keyCode === 88)) {\r\n            return;\r\n        }\r\n\r\n        //select all\r\n        if (evt && (evt.ctrlKey || evt.metaKey) && keyCode === 65) {\r\n            this._selectAllText();\r\n            evt.preventDefault();\r\n            return;\r\n        }\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 191: //SLASH\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._textWrapper.text && this._textWrapper.length > 0) {\r\n                    //delete the highlighted text\r\n                    if (this._isTextHighlightOn) {\r\n                        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                        this._textHasChanged();\r\n                        this._isTextHighlightOn = false;\r\n                        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._blinkIsEven = false;\r\n                        if (evt) {\r\n                            evt.preventDefault();\r\n                        }\r\n                        return;\r\n                    }\r\n                    //delete single character\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._textWrapper.substr(0, this._textWrapper.length - 1);\r\n                    } else {\r\n                        const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this._textWrapper.removePart(deletePosition - 1, deletePosition);\r\n                            this._textHasChanged();\r\n                        }\r\n                    }\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n                    this._textHasChanged();\r\n                    this._isTextHighlightOn = false;\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    if (evt) {\r\n                        evt.preventDefault();\r\n                    }\r\n                    return;\r\n                }\r\n                if (this._textWrapper.text && this._textWrapper.length > 0 && this._cursorOffset > 0) {\r\n                    const deletePosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(deletePosition, deletePosition + 1);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset--;\r\n                }\r\n                if (evt) {\r\n                    evt.preventDefault();\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                this._isTextHighlightOn = false;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._textWrapper.length;\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._textWrapper.length) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                }\r\n\r\n                if (evt && evt.shiftKey) {\r\n                    // update the cursor\r\n                    this._blinkIsEven = false;\r\n                    // shift + ctrl/cmd + <-\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            if (this._textWrapper.length === this._cursorOffset) {\r\n                                return;\r\n                            } else {\r\n                                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset + 1;\r\n                            }\r\n                        }\r\n                        this._startHighlightIndex = 0;\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length;\r\n                        this._isTextHighlightOn = true;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n                    //store the starting point\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset >= this._textWrapper.length ? this._textWrapper.length : this._cursorOffset - 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._endHighlightIndex;\r\n                        this._cursorOffset = this._startHighlightIndex === 0 ? this._textWrapper.length : this._textWrapper.length - this._startHighlightIndex + 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n                    this._isTextHighlightOn = false;\r\n                }\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = this._textWrapper.length;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                if (evt && evt.shiftKey) {\r\n                    //update the cursor\r\n                    this._blinkIsEven = false;\r\n                    //shift + ctrl/cmd + ->\r\n                    if (evt.ctrlKey || evt.metaKey) {\r\n                        if (!this._isTextHighlightOn) {\r\n                            if (this._cursorOffset === 0) {\r\n                                return;\r\n                            } else {\r\n                                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset - 1;\r\n                            }\r\n                        }\r\n                        this._endHighlightIndex = this._textWrapper.length;\r\n                        this._isTextHighlightOn = true;\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = 0;\r\n                        this._markAsDirty();\r\n                        return;\r\n                    }\r\n\r\n                    if (!this._isTextHighlightOn) {\r\n                        this._isTextHighlightOn = true;\r\n                        this._cursorIndex = this._cursorOffset <= 0 ? 0 : this._cursorOffset + 1;\r\n                    }\r\n                    //if text is already highlighted\r\n                    else if (this._cursorIndex === -1) {\r\n                        this._cursorIndex = this._textWrapper.length - this._startHighlightIndex;\r\n                        this._cursorOffset = this._textWrapper.length === this._endHighlightIndex ? 0 : this._textWrapper.length - this._endHighlightIndex - 1;\r\n                    }\r\n                    //set the highlight indexes\r\n                    if (this._cursorIndex < this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                    } else if (this._cursorIndex > this._cursorOffset) {\r\n                        this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                        this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                    } else {\r\n                        this._isTextHighlightOn = false;\r\n                    }\r\n                    this._markAsDirty();\r\n                    return;\r\n                }\r\n                if (this._isTextHighlightOn) {\r\n                    this._cursorOffset = this._textWrapper.length - this._endHighlightIndex;\r\n                    this._isTextHighlightOn = false;\r\n                }\r\n                //ctr + ->\r\n                if (evt && (evt.ctrlKey || evt.metaKey)) {\r\n                    this._cursorOffset = 0;\r\n                    evt.preventDefault();\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._isTextHighlightOn = false;\r\n                this._cursorIndex = -1;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                if (evt) {\r\n                    //add support for single and double quotes\r\n                    if (evt.code == \"Quote\") {\r\n                        if (evt.shiftKey) {\r\n                            keyCode = 34;\r\n                            key = '\"';\r\n                        } else {\r\n                            keyCode = 39;\r\n                            key = \"'\";\r\n                        }\r\n                    } else {\r\n                        evt.preventDefault();\r\n                        this._cursorIndex = -1;\r\n                        this.deadKey = true;\r\n                    }\r\n                } else {\r\n                    this._cursorIndex = -1;\r\n                    this.deadKey = true;\r\n                }\r\n                break;\r\n        }\r\n        // Printable characters\r\n        if (\r\n            key &&\r\n            (keyCode === -1 || // Direct access\r\n                keyCode === 32 || // Space\r\n                keyCode === 34 || // \"    add support for single and double quotes\r\n                keyCode === 39 || // '\r\n                (keyCode > 47 && keyCode < 64) || // Numbers\r\n                (keyCode > 64 && keyCode < 91) || // Letters\r\n                (keyCode > 159 && keyCode < 193) || // Special characters\r\n                (keyCode > 218 && keyCode < 223) || // Special characters\r\n                (keyCode > 95 && keyCode < 112))\r\n        ) {\r\n            // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._isTextHighlightOn) {\r\n                    this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex, key);\r\n                    this._textHasChanged();\r\n                    this._cursorOffset = this._textWrapper.length - (this._startHighlightIndex + 1);\r\n                    this._isTextHighlightOn = false;\r\n                    this._blinkIsEven = false;\r\n                    this._markAsDirty();\r\n                } else if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n                    this._textWrapper.removePart(insertPosition, insertPosition, key);\r\n                    this._textHasChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param offset\r\n     * @hidden\r\n     */\r\n    private _updateValueFromCursorIndex(offset: number) {\r\n        //update the cursor\r\n        this._blinkIsEven = false;\r\n\r\n        if (this._cursorIndex === -1) {\r\n            this._cursorIndex = offset;\r\n        } else {\r\n            if (this._cursorIndex < this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n            } else if (this._cursorIndex > this._cursorOffset) {\r\n                this._endHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n                this._startHighlightIndex = this._textWrapper.length - this._cursorIndex;\r\n            } else {\r\n                this._isTextHighlightOn = false;\r\n                this._markAsDirty();\r\n                return;\r\n            }\r\n        }\r\n        this._isTextHighlightOn = true;\r\n        this._markAsDirty();\r\n    }\r\n    /**\r\n     * @param evt\r\n     * @hidden\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _processDblClick(evt: PointerInfo) {\r\n        //pre-find the start and end index of the word under cursor, speeds up the rendering\r\n        this._startHighlightIndex = this._textWrapper.length - this._cursorOffset;\r\n        this._endHighlightIndex = this._startHighlightIndex;\r\n        let moveLeft, moveRight;\r\n        do {\r\n            moveRight = this._endHighlightIndex < this._textWrapper.length && this._textWrapper.isWord(this._endHighlightIndex) ? ++this._endHighlightIndex : 0;\r\n            moveLeft = this._startHighlightIndex > 0 && this._textWrapper.isWord(this._startHighlightIndex - 1) ? --this._startHighlightIndex : 0;\r\n        } while (moveLeft || moveRight);\r\n\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        this.onTextHighlightObservable.notifyObservers(this);\r\n\r\n        this._isTextHighlightOn = true;\r\n        this._clickedCoordinate = null;\r\n        this._blinkIsEven = true;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n    /** @hidden */\r\n    private _selectAllText() {\r\n        this._blinkIsEven = true;\r\n        this._isTextHighlightOn = true;\r\n\r\n        this._startHighlightIndex = 0;\r\n        this._endHighlightIndex = this._textWrapper.length;\r\n        this._cursorOffset = this._textWrapper.length;\r\n        this._cursorIndex = -1;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Handles the keyboard event\r\n     * @param evt Defines the KeyboardEvent\r\n     */\r\n    public processKeyboard(evt: IKeyboardEvent): void {\r\n        // process pressed key\r\n        this.processKey(evt.keyCode, evt.key, evt);\r\n\r\n        this.onKeyboardEventProcessedObservable.notifyObservers(evt);\r\n    }\r\n\r\n    /**\r\n     * @param ev\r\n     * @hidden\r\n     */\r\n    private _onCopyText(ev: ClipboardEvent): void {\r\n        this._isTextHighlightOn = false;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n        this._host.clipboardData = this._highlightedText;\r\n    }\r\n    /**\r\n     * @param ev\r\n     * @hidden\r\n     */\r\n    private _onCutText(ev: ClipboardEvent): void {\r\n        if (!this._highlightedText) {\r\n            return;\r\n        }\r\n        this._textWrapper.removePart(this._startHighlightIndex, this._endHighlightIndex);\r\n        this._textHasChanged();\r\n        this._isTextHighlightOn = false;\r\n        this._cursorOffset = this._textWrapper.length - this._startHighlightIndex;\r\n        //when write permission to clipbaord data is denied\r\n        try {\r\n            ev.clipboardData && ev.clipboardData.setData(\"text/plain\", this._highlightedText);\r\n        } catch {} //pass\r\n\r\n        this._host.clipboardData = this._highlightedText;\r\n        this._highlightedText = \"\";\r\n    }\r\n    /**\r\n     * @param ev\r\n     * @hidden\r\n     */\r\n    private _onPasteText(ev: ClipboardEvent): void {\r\n        let data: string = \"\";\r\n        if (ev.clipboardData && ev.clipboardData.types.indexOf(\"text/plain\") !== -1) {\r\n            data = ev.clipboardData.getData(\"text/plain\");\r\n        } else {\r\n            //get the cached data; returns blank string by default\r\n            data = this._host.clipboardData;\r\n        }\r\n        const insertPosition = this._textWrapper.length - this._cursorOffset;\r\n        this._textWrapper.removePart(insertPosition, insertPosition, data);\r\n        this._textHasChanged();\r\n    }\r\n\r\n    public _draw(context: ICanvasRenderingContext): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        // Background\r\n        if (this._isFocused) {\r\n            if (this._focusedBackground) {\r\n                context.fillStyle = this._isEnabled ? this._focusedBackground : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        } else if (this._background) {\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (!this._fontOffset || this._wasDirty) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n\r\n        // Text\r\n        const clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, this._tempParentMeasure.width);\r\n        if (this.color) {\r\n            context.fillStyle = this.color;\r\n        }\r\n\r\n        let text = this._beforeRenderText(this._textWrapper);\r\n\r\n        if (!this._isFocused && !this._textWrapper.text && this._placeholderText) {\r\n            text = new TextWrapper();\r\n            text.text = this._placeholderText;\r\n\r\n            if (this._placeholderColor) {\r\n                context.fillStyle = this._placeholderColor;\r\n            }\r\n        }\r\n\r\n        this._textWidth = context.measureText(text.text).width;\r\n        const marginWidth = this._margin.getValueInPixel(this._host, this._tempParentMeasure.width) * 2;\r\n        if (this._autoStretchWidth) {\r\n            this.width = Math.min(this._maxWidth.getValueInPixel(this._host, this._tempParentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            this._autoStretchWidth = true; // setting the width will have reset _autoStretchWidth to false!\r\n        }\r\n\r\n        const rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n        const availableWidth = this._width.getValueInPixel(this._host, this._tempParentMeasure.width) - marginWidth;\r\n\r\n        context.save();\r\n        context.beginPath();\r\n        context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n        context.clip();\r\n\r\n        if (this._isFocused && this._textWidth > availableWidth) {\r\n            const textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n            if (!this._scrollLeft) {\r\n                this._scrollLeft = textLeft;\r\n            }\r\n        } else {\r\n            this._scrollLeft = clipTextLeft;\r\n        }\r\n\r\n        context.fillText(text.text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n        // Cursor\r\n        if (this._isFocused) {\r\n            // Need to move cursor\r\n            if (this._clickedCoordinate) {\r\n                const rightPosition = this._scrollLeft + this._textWidth;\r\n                const absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                let currentSize = 0;\r\n                this._cursorOffset = 0;\r\n                let previousDist = 0;\r\n                do {\r\n                    if (this._cursorOffset) {\r\n                        previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                    }\r\n                    this._cursorOffset++;\r\n                    currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n                } while (currentSize < absoluteCursorPosition && text.length >= this._cursorOffset);\r\n\r\n                // Find closest move\r\n                if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                    this._cursorOffset--;\r\n                }\r\n\r\n                this._blinkIsEven = false;\r\n                this._clickedCoordinate = null;\r\n            }\r\n\r\n            // Render cursor\r\n            if (!this._blinkIsEven) {\r\n                const cursorOffsetText = text.substr(text.length - this._cursorOffset);\r\n                const cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                if (cursorLeft < clipTextLeft) {\r\n                    this._scrollLeft += clipTextLeft - cursorLeft;\r\n                    cursorLeft = clipTextLeft;\r\n                    this._markAsDirty();\r\n                } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                    this._scrollLeft += clipTextLeft + availableWidth - cursorLeft;\r\n                    cursorLeft = clipTextLeft + availableWidth;\r\n                    this._markAsDirty();\r\n                }\r\n                if (!this._isTextHighlightOn) {\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n            }\r\n\r\n            clearTimeout(this._blinkTimeout);\r\n            this._blinkTimeout = <any>setTimeout(() => {\r\n                this._blinkIsEven = !this._blinkIsEven;\r\n                this._markAsDirty();\r\n            }, 500);\r\n\r\n            //show the highlighted text\r\n            if (this._isTextHighlightOn) {\r\n                clearTimeout(this._blinkTimeout);\r\n                const highlightCursorOffsetWidth = context.measureText(text.substring(this._startHighlightIndex)).width;\r\n                let highlightCursorLeft = this._scrollLeft + this._textWidth - highlightCursorOffsetWidth;\r\n                this._highlightedText = text.substring(this._startHighlightIndex, this._endHighlightIndex);\r\n                let width = context.measureText(text.substring(this._startHighlightIndex, this._endHighlightIndex)).width;\r\n                if (highlightCursorLeft < clipTextLeft) {\r\n                    width = width - (clipTextLeft - highlightCursorLeft);\r\n                    if (!width) {\r\n                        // when using left arrow on text.length > availableWidth;\r\n                        // assigns the width of the first letter after clipTextLeft\r\n                        width = context.measureText(text.charAt(text.length - this._cursorOffset)).width;\r\n                    }\r\n                    highlightCursorLeft = clipTextLeft;\r\n                }\r\n                //for transparancy\r\n                context.globalAlpha = this._highligherOpacity;\r\n                context.fillStyle = this._textHighlightColor;\r\n                context.fillRect(highlightCursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, width, this._fontOffset.height);\r\n                context.globalAlpha = 1.0;\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        // Border\r\n        if (this._thickness) {\r\n            if (this._isFocused) {\r\n                if (this.focusedColor) {\r\n                    context.strokeStyle = this.focusedColor;\r\n                }\r\n            } else {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n            }\r\n\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(\r\n                this._currentMeasure.left + this._thickness / 2,\r\n                this._currentMeasure.top + this._thickness / 2,\r\n                this._currentMeasure.width - this._thickness,\r\n                this._currentMeasure.height - this._thickness\r\n            );\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, pi: PointerInfoBase): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex, pi)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isReadOnly) {\r\n            return true;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        this._isTextHighlightOn = false;\r\n        this._highlightedText = \"\";\r\n        this._cursorIndex = -1;\r\n        this._isPointerDown = true;\r\n        this._host._capturingControl[pointerId] = this;\r\n        this._focusedBy = (pi.event as IPointerEvent).pointerType;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if (!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n    public _onPointerMove(target: Control, coordinates: Vector2, pointerId: number, pi: PointerInfoBase): void {\r\n        if (this._host.focusedControl === this && this._isPointerDown && !this.isReadOnly) {\r\n            this._clickedCoordinate = coordinates.x;\r\n            this._markAsDirty();\r\n            this._updateValueFromCursorIndex(this._cursorOffset);\r\n        }\r\n        super._onPointerMove(target, coordinates, pointerId, pi);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._isPointerDown = false;\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(textWrapper: TextWrapper): TextWrapper {\r\n        return textWrapper;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n        this.onTextCopyObservable.clear();\r\n        this.onTextCutObservable.clear();\r\n        this.onTextPasteObservable.clear();\r\n        this.onTextHighlightObservable.clear();\r\n        this.onKeyboardEventProcessedObservable.clear();\r\n    }\r\n}\r\nRegisterClass(\"BABYLON.GUI.InputText\", InputText);\r\n"]}