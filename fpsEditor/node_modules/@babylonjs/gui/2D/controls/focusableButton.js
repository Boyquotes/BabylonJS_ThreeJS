import { __extends } from "tslib";
import { Button } from "./button.js";
import { RegisterClass } from "@babylonjs/core/Misc/typeStore.js";
import { Observable } from "@babylonjs/core/Misc/observable.js";
/**
 * Class used to create a focusable button that can easily handle keyboard events
 * @since 5.0.0
 */
var FocusableButton = /** @class */ (function (_super) {
    __extends(FocusableButton, _super);
    function FocusableButton(name) {
        var _this = _super.call(this, name) || this;
        _this.name = name;
        /** Highlight color when button is focused */
        _this.focusedColor = null;
        _this._isFocused = false;
        _this._unfocusedColor = null;
        /** Observable raised when the control gets the focus */
        _this.onFocusObservable = new Observable();
        /** Observable raised when the control loses the focus */
        _this.onBlurObservable = new Observable();
        /** Observable raised when a key event was processed */
        _this.onKeyboardEventProcessedObservable = new Observable();
        _this._unfocusedColor = _this.color;
        return _this;
    }
    /** @hidden */
    FocusableButton.prototype.onBlur = function () {
        if (this._isFocused) {
            this._isFocused = false;
            if (this.focusedColor && this._unfocusedColor != null) {
                // Set color back to saved unfocused color
                this.color = this._unfocusedColor;
            }
            this.onBlurObservable.notifyObservers(this);
        }
    };
    /** @hidden */
    FocusableButton.prototype.onFocus = function () {
        this._isFocused = true;
        if (this.focusedColor) {
            // Save the unfocused color
            this._unfocusedColor = this.color;
            this.color = this.focusedColor;
        }
        this.onFocusObservable.notifyObservers(this);
    };
    /**
     * Function called to get the list of controls that should not steal the focus from this control
     * @returns an array of controls
     */
    FocusableButton.prototype.keepsFocusWith = function () {
        return null;
    };
    /**
     * Function to focus a button programmatically
     */
    FocusableButton.prototype.focus = function () {
        this._host.moveFocusToControl(this);
    };
    /**
     * Function to unfocus a button programmatically
     */
    FocusableButton.prototype.blur = function () {
        this._host.focusedControl = null;
    };
    /**
     * Handles the keyboard event
     * @param evt Defines the KeyboardEvent
     */
    FocusableButton.prototype.processKeyboard = function (evt) {
        this.onKeyboardEventProcessedObservable.notifyObservers(evt, -1, this);
    };
    /**
     * @param target
     * @param coordinates
     * @param pointerId
     * @param buttonIndex
     * @param pi
     * @hidden
     */
    FocusableButton.prototype._onPointerDown = function (target, coordinates, pointerId, buttonIndex, pi) {
        if (!this.isReadOnly) {
            // Clicking on button should focus
            this.focus();
        }
        return _super.prototype._onPointerDown.call(this, target, coordinates, pointerId, buttonIndex, pi);
    };
    /** @hidden */
    FocusableButton.prototype.displose = function () {
        _super.prototype.dispose.call(this);
        this.onBlurObservable.clear();
        this.onFocusObservable.clear();
        this.onKeyboardEventProcessedObservable.clear();
    };
    return FocusableButton;
}(Button));
export { FocusableButton };
RegisterClass("BABYLON.GUI.FocusableButton", FocusableButton);
//# sourceMappingURL=focusableButton.js.map